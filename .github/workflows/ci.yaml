name: Infra create and Helm Deploy 

on:
  push:
    branches:
      - 'master'
      - 'feature/terraform'

jobs:
  infra:
    name: Infra create
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION}}

      - name: Validate the terraform syntax
        run: terraform Validate
        working-directory: infrastructure

      - name: Initialize the terraform resources
        run: terraform init -var-file=config.tfvars
        working-directory: infrastructure    

      - name: Plan the terraform resources
        run: terraform plan -var-file=config.tfvars
        working-directory: infrastructure   

      - name: Apply the terraform resources
        run: terraform apply -var-file=config.tfvars
        working-directory: infrastructure  

      - name: Save Kubeconfig in ~/.kube/config file
        run: terraform output -raw kubeconfig ~/.kube/config

      - uses: actions/upload-artifact@v2
        with:
          name: artifact
          path: ~/.kube/config
  
  build_and_deploy:
    name: Build and Deploy Application
    needs: infra
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION}}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: my-ecr-repo
          IMAGE_TAG: ${{ github.run_id }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Download the kubeconfig file 
        uses: actions/download-artifacts@master
        with:
          name: artifact
          path: ~/.kube/config

      - name: deploy the application
        run: helm upgrade --install flask-app helm --set image.repository=$ECR_REGISTRY/$ECR_REPOSITORY --set image.tag=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

        